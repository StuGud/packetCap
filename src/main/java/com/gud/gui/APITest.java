package com.gud.gui;

import com.gud.job.RequestSender;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.util.HashMap;
import java.util.Map;

public class APITest {
    private JTextArea responseTextArea;
    private JButton sendButton;
    private JTextField urlTextField;
    private JComboBox requestMethodComboBox;
    private JTable mapTable;
    private JPanel apiTestPanel;
    private JButton addMapButton;
    private JScrollPane scrollPane1;

    private DefaultTableModel tableModel4mt;

    private RequestSender requestSender;

    public JPanel getApiTest() {
        return apiTestPanel;
    }

    public APITest() {
        init();
        sendButton.addComponentListener(new ComponentAdapter() {
        });
        sendButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String urlStr = urlTextField.getText();
                String requestMethod = (String) requestMethodComboBox.getSelectedItem();
                Map<String, String> map = new HashMap<>();
                String key = "";
                String value = "";
                if (tableModel4mt.getColumnCount() == 2) {
                    for (int i = 0; i < tableModel4mt.getRowCount(); i++) {
                        key = tableModel4mt.getValueAt(i, 0).toString();
                        value = tableModel4mt.getValueAt(i, 1).toString();
                        if (key.isEmpty() || value.isEmpty()) {
                            System.out.println("key，value 有空值");
                        } else {
                            map.put(key, value);
                        }
                    }
                } else {
                    System.out.println("column出错");
                }
                String responseStr = requestSender.send(urlStr, RequestSender.RequestMethod.valueOf(requestMethod), map);
                responseTextArea.setText(responseStr);
            }
        });
        addMapButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String[] blankRow = {"", ""};
                tableModel4mt.addRow(blankRow);
            }
        });
    }

    private void init() {

        requestSender = new RequestSender();

        for (String requestMethod : requestSender.getRequestMethods()) {
            requestMethodComboBox.addItem(requestMethod);
        }

        final String[] columnNames1 = {"key", "value"};
        tableModel4mt = new DefaultTableModel(null, columnNames1);
        mapTable.setModel(tableModel4mt);

        // 创建单元格渲染器
        MyTableCellRenderer renderer = new MyTableCellRenderer();

        // 遍历表格的每一列，分别给每一列设置单元格渲染器
        for (int i = 0; i < columnNames1.length; i++) {
            // 根据 列名 获取 表格列
            TableColumn tableColumn = mapTable.getColumn(columnNames1[i]);
            // 设置 表格列 的 单元格渲染器
            tableColumn.setCellRenderer(renderer);
        }
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("APITest");
        frame.setContentPane(new APITest().apiTestPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        apiTestPanel = new JPanel();
        apiTestPanel.setLayout(new GridLayoutManager(4, 3, new Insets(0, 0, 0, 0), -1, -1));
        responseTextArea = new JTextArea();
        responseTextArea.setText("");
        apiTestPanel.add(responseTextArea, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        sendButton = new JButton();
        sendButton.setText("send");
        apiTestPanel.add(sendButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        urlTextField = new JTextField();
        apiTestPanel.add(urlTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        requestMethodComboBox = new JComboBox();
        apiTestPanel.add(requestMethodComboBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addMapButton = new JButton();
        addMapButton.setText("addMap");
        apiTestPanel.add(addMapButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        scrollPane1 = new JScrollPane();
        apiTestPanel.add(scrollPane1, new GridConstraints(2, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        mapTable = new JTable();
        scrollPane1.setViewportView(mapTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return apiTestPanel;
    }

    /**
     * 单元格渲染器，继承已实现渲染器接口的默认渲染器 DefaultTableCellRenderer
     */
    public static class MyTableCellRenderer extends DefaultTableCellRenderer {
        /**
         * 返回默认的表单元格渲染器，此方法在父类中已实现，直接调用父类方法返回，在返回前做相关参数的设置即可
         */
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            // 偶数行背景设置为白色，奇数行背景设置为灰色
            if (row % 2 == 0) {
                setBackground(Color.gray);
            } else {
                setBackground(Color.LIGHT_GRAY);
            }

            return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        }
    }


}
